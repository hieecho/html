{
  "htmls": [
    {
      "id": "1",
      "title": "示例HTML页面",
      "content": "<!DOCTYPE html>\n<html lang=\"zh-CN\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>示例页面</title>\n    <style>\n        body {\n            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'PingFang SC', sans-serif;\n            max-width: 800px;\n            margin: 0 auto;\n            padding: 20px;\n            line-height: 1.6;\n            background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);\n            min-height: 100vh;\n        }\n        .container {\n            background: white;\n            padding: 40px;\n            border-radius: 10px;\n            box-shadow: 0 10px 30px rgba(0,0,0,0.1);\n        }\n        h1 {\n            color: #2c3e50;\n            text-align: center;\n            margin-bottom: 30px;\n        }\n        .feature-list {\n            list-style: none;\n            padding: 0;\n        }\n        .feature-list li {\n            padding: 10px 0;\n            border-bottom: 1px solid #eee;\n            display: flex;\n            align-items: center;\n        }\n        .feature-list li:before {\n            content: \"✓\";\n            color: #27ae60;\n            font-weight: bold;\n            margin-right: 10px;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <h1>🎉 欢迎使用HTML存储管理器</h1>\n        <ul class=\"feature-list\">\n            <li>支持多种HTML内容导入方式</li>\n            <li>实时预览和代码编辑</li>\n            <li>文件夹和标签分类管理</li>\n            <li>快速搜索和筛选</li>\n            <li>本地存储，数据安全</li>\n        </ul>\n    </div>\n</body>\n</html>",
      "contentType": "code",
      "folderId": "1",
      "tags": [
        "示例",
        "欢迎"
      ],
      "createdAt": "2024-01-01T00:00:00.000Z",
      "updatedAt": "2024-01-01T00:00:00.000Z"
    },
    {
      "id": "1755656321819",
      "title": "test",
      "contentType": "code",
      "content": "<!DOCTYPE html>\n<html lang=\"zh-CN\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>测试真实登录修复</title>\n    <style>\n        body {\n            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;\n            max-width: 1200px;\n            margin: 0 auto;\n            padding: 20px;\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n            min-height: 100vh;\n        }\n        .container {\n            background: white;\n            border-radius: 15px;\n            padding: 30px;\n            box-shadow: 0 20px 40px rgba(0,0,0,0.1);\n            margin-bottom: 20px;\n        }\n        h1 {\n            text-align: center;\n            color: #2d3436;\n            margin-bottom: 30px;\n        }\n        .test-section {\n            background: #f8f9fa;\n            border-radius: 10px;\n            padding: 20px;\n            margin: 20px 0;\n            border-left: 4px solid #007bff;\n        }\n        .test-section.success {\n            border-left-color: #28a745;\n            background: #d4edda;\n        }\n        .test-section.warning {\n            border-left-color: #ffc107;\n            background: #fff3cd;\n        }\n        .test-section.error {\n            border-left-color: #dc3545;\n            background: #f8d7da;\n        }\n        .btn {\n            background: linear-gradient(45deg, #007bff, #0056b3);\n            color: white;\n            border: none;\n            padding: 12px 24px;\n            border-radius: 8px;\n            font-weight: 600;\n            margin: 5px;\n            cursor: pointer;\n            transition: all 0.3s ease;\n        }\n        .btn:hover {\n            transform: translateY(-2px);\n            box-shadow: 0 8px 25px rgba(0,123,255,0.3);\n        }\n        .btn.success {\n            background: linear-gradient(45deg, #28a745, #1e7e34);\n        }\n        .btn.warning {\n            background: linear-gradient(45deg, #ffc107, #e0a800);\n        }\n        .btn.danger {\n            background: linear-gradient(45deg, #dc3545, #c82333);\n        }\n        .test-result {\n            background: #e9ecef;\n            border-radius: 8px;\n            padding: 15px;\n            margin: 10px 0;\n            font-family: monospace;\n            white-space: pre-wrap;\n            max-height: 300px;\n            overflow-y: auto;\n        }\n        .status-indicator {\n            display: inline-block;\n            padding: 4px 12px;\n            border-radius: 20px;\n            font-size: 12px;\n            font-weight: bold;\n            margin: 5px;\n        }\n        .status-pass {\n            background: #d4edda;\n            color: #155724;\n        }\n        .status-fail {\n            background: #f8d7da;\n            color: #721c24;\n        }\n        .status-pending {\n            background: #fff3cd;\n            color: #856404;\n        }\n        .credentials-box {\n            background: #e7f3ff;\n            border: 1px solid #007bff;\n            border-radius: 8px;\n            padding: 15px;\n            margin: 15px 0;\n        }\n        .step-list {\n            list-style: none;\n            padding: 0;\n        }\n        .step-item {\n            display: flex;\n            align-items: center;\n            margin: 10px 0;\n            padding: 10px;\n            background: white;\n            border-radius: 8px;\n            border-left: 3px solid #007bff;\n        }\n        .step-number {\n            background: #007bff;\n            color: white;\n            width: 25px;\n            height: 25px;\n            border-radius: 50%;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            font-weight: bold;\n            margin-right: 15px;\n            font-size: 12px;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <h1>🔧 测试真实登录修复</h1>\n        \n        <div class=\"test-section\">\n            <h3>📋 修复内容总结</h3>\n            <p>本次修复解决了以下问题：</p>\n            <ul>\n                <li>✅ 修复了主popup.ts中的假登录逻辑，改为使用AuthManager真实验证</li>\n                <li>✅ 为演示模式添加了明确的警告提示</li>\n                <li>✅ 增强了Background Script的用户数据获取和错误处理</li>\n                <li>✅ 创建了详细的使用指南文档</li>\n            </ul>\n        </div>\n\n        <div class=\"test-section warning\">\n            <h3>⚠️ 测试前准备</h3>\n            <ol class=\"step-list\">\n                <li class=\"step-item\">\n                    <div class=\"step-number\">1</div>\n                    <div>确保后端服务运行在 <code>http://localhost:5000</code></div>\n                </li>\n                <li class=\"step-item\">\n                    <div class=\"step-number\">2</div>\n                    <div>在Chrome扩展管理页面重新加载插件</div>\n                </li>\n                <li class=\"step-item\">\n                    <div class=\"step-number\">3</div>\n                    <div>打开Chrome开发者工具查看控制台日志</div>\n                </li>\n            </ol>\n        </div>\n\n        <div class=\"test-section\">\n            <h3>🧪 测试1: 验证真实登录功能</h3>\n            <p>测试修复后的真实登录是否正确验证密码：</p>\n            \n            <div class=\"credentials-box\">\n                <h4>🔑 测试凭据</h4>\n                <p><strong>正确凭据:</strong> admin / Admin123!</p>\n                <p><strong>错误凭据:</strong> admin / wrongpassword</p>\n            </div>\n\n            <button class=\"btn\" onclick=\"testRealLoginAPI()\">测试API连接</button>\n            <button class=\"btn success\" onclick=\"openPluginPopup()\">打开插件Popup</button>\n            <button class=\"btn warning\" onclick=\"checkAuthManager()\">检查AuthManager</button>\n            \n            <div id=\"realLoginResult\" class=\"test-result\" style=\"display: none;\"></div>\n        </div>\n\n        <div class=\"test-section\">\n            <h3>🎭 测试2: 验证演示模式警告</h3>\n            <p>确认演示模式现在会显示警告对话框：</p>\n            \n            <button class=\"btn warning\" onclick=\"testDemoModeWarning()\">测试演示模式警告</button>\n            \n            <div id=\"demoWarningResult\" class=\"test-result\" style=\"display: none;\"></div>\n        </div>\n\n        <div class=\"test-section\">\n            <h3>🔄 测试3: 验证数据同步</h3>\n            <p>测试是否能正确获取主系统用户数据：</p>\n            \n            <button class=\"btn\" onclick=\"testMainSystemAPI()\">测试主系统API</button>\n            <button class=\"btn\" onclick=\"testSettingsAPI()\">测试设置API</button>\n            <button class=\"btn success\" onclick=\"testDataMerging()\">测试数据合并</button>\n            \n            <div id=\"dataSyncResult\" class=\"test-result\" style=\"display: none;\"></div>\n        </div>\n\n        <div class=\"test-section\">\n            <h3>📊 综合测试状态</h3>\n            <div id=\"testStatus\">\n                <span class=\"status-indicator status-pending\">真实登录验证</span>\n                <span class=\"status-indicator status-pending\">演示模式警告</span>\n                <span class=\"status-indicator status-pending\">数据同步功能</span>\n                <span class=\"status-indicator status-pending\">错误处理机制</span>\n            </div>\n        </div>\n    </div>\n\n    <div class=\"container\">\n        <h2>🎯 具体测试步骤</h2>\n        \n        <div class=\"test-section\">\n            <h3>步骤1: 测试真实登录</h3>\n            <ol>\n                <li>打开插件popup（点击浏览器工具栏中的插件图标）</li>\n                <li>输入错误密码：<code>admin / wrongpassword</code></li>\n                <li>点击<strong>\"登录\"</strong>按钮（不是演示模式）</li>\n                <li><strong>预期结果:</strong> 应该显示登录失败错误</li>\n                <li>输入正确密码：<code>admin / Admin123!</code></li>\n                <li>再次点击<strong>\"登录\"</strong>按钮</li>\n                <li><strong>预期结果:</strong> 应该成功登录并显示真实用户信息</li>\n            </ol>\n        </div>\n\n        <div class=\"test-section\">\n            <h3>步骤2: 测试演示模式</h3>\n            <ol>\n                <li>在插件popup中，直接点击<strong>\"演示模式\"</strong>按钮</li>\n                <li><strong>预期结果:</strong> 应该弹出警告对话框，说明这是测试模式</li>\n                <li>点击确认继续</li>\n                <li><strong>预期结果:</strong> 显示演示用户信息（demo_user）</li>\n                <li>注意用户信息应该标明是演示数据</li>\n            </ol>\n        </div>\n\n        <div class=\"test-section\">\n            <h3>步骤3: 验证数据来源</h3>\n            <ol>\n                <li>在Chrome开发者工具的Console中查看日志</li>\n                <li>应该看到详细的数据获取过程</li>\n                <li>真实登录应该显示<code>数据来源: main_system_*</code></li>\n                <li>演示模式应该显示<code>数据来源: default_demo</code></li>\n            </ol>\n        </div>\n    </div>\n\n    <script>\n        let testResults = {\n            realLogin: null,\n            demoWarning: null,\n            dataSync: null,\n            errorHandling: null\n        };\n\n        function log(message, type = 'info') {\n            const timestamp = new Date().toLocaleTimeString();\n            console.log(`[${timestamp}] ${message}`);\n        }\n\n        async function testRealLoginAPI() {\n            const resultDiv = document.getElementById('realLoginResult');\n            resultDiv.style.display = 'block';\n            resultDiv.textContent = '🧪 测试真实登录API连接...\\n';\n            \n            try {\n                // 测试错误密码\n                log('测试错误密码...');\n                const wrongResponse = await fetch('http://localhost:5000/api/extension/auth/login', {\n                    method: 'POST',\n                    headers: { 'Content-Type': 'application/json' },\n                    body: JSON.stringify({ username: 'admin', password: 'wrongpassword' })\n                });\n                \n                resultDiv.textContent += `❌ 错误密码测试: ${wrongResponse.status} ${wrongResponse.statusText}\\n`;\n                \n                // 测试正确密码\n                log('测试正确密码...');\n                const correctResponse = await fetch('http://localhost:5000/api/extension/auth/login', {\n                    method: 'POST',\n                    headers: { 'Content-Type': 'application/json' },\n                    body: JSON.stringify({ username: 'admin', password: 'Admin123!' })\n                });\n                \n                const correctData = await correctResponse.json();\n                resultDiv.textContent += `✅ 正确密码测试: ${correctResponse.status}\\n`;\n                resultDiv.textContent += `返回数据: ${JSON.stringify(correctData, null, 2)}\\n`;\n                \n                updateTestStatus('realLogin', correctResponse.ok ? 'pass' : 'fail');\n                \n            } catch (error) {\n                resultDiv.textContent += `❌ API测试失败: ${error.message}\\n`;\n                updateTestStatus('realLogin', 'fail');\n            }\n        }\n\n        function openPluginPopup() {\n            alert('请手动测试：\\n\\n1. 点击浏览器工具栏中的插件图标\\n2. 分别测试错误密码和正确密码\\n3. 观察控制台日志和登录结果\\n\\n错误密码: admin / wrongpassword\\n正确密码: admin / Admin123!');\n        }\n\n        function checkAuthManager() {\n            const resultDiv = document.getElementById('realLoginResult');\n            resultDiv.style.display = 'block';\n            resultDiv.textContent += '\\n🔍 AuthManager检查:\\n';\n            resultDiv.textContent += '- 已修复popup.ts使用AuthManager.getInstance()\\n';\n            resultDiv.textContent += '- 已添加真实API验证逻辑\\n';\n            resultDiv.textContent += '- 已移除假的setTimeout登录逻辑\\n';\n            resultDiv.textContent += '- 请在插件中实际测试登录功能\\n';\n        }\n\n        function testDemoModeWarning() {\n            const resultDiv = document.getElementById('demoWarningResult');\n            resultDiv.style.display = 'block';\n            resultDiv.textContent = '⚠️ 演示模式警告测试:\\n\\n';\n            resultDiv.textContent += '请手动测试：\\n';\n            resultDiv.textContent += '1. 打开插件popup\\n';\n            resultDiv.textContent += '2. 点击\"演示模式\"按钮\\n';\n            resultDiv.textContent += '3. 应该看到警告对话框\\n';\n            resultDiv.textContent += '4. 对话框内容应该说明这是测试模式\\n';\n            resultDiv.textContent += '5. 确认后显示演示数据（非真实信息）\\n';\n            \n            updateTestStatus('demoWarning', 'pending');\n        }\n\n        async function testMainSystemAPI() {\n            const resultDiv = document.getElementById('dataSyncResult');\n            resultDiv.style.display = 'block';\n            resultDiv.textContent = '🔄 测试主系统API...\\n';\n            \n            try {\n                // 测试 /api/auth/me\n                const meResponse = await fetch('/api/auth/me', {\n                    method: 'GET',\n                    credentials: 'include'\n                });\n                \n                resultDiv.textContent += `GET /api/auth/me: ${meResponse.status}\\n`;\n                \n                if (meResponse.ok) {\n                    const meData = await meResponse.json();\n                    resultDiv.textContent += `用户信息: ${JSON.stringify(meData, null, 2)}\\n\\n`;\n                } else {\n                    resultDiv.textContent += `错误: ${meResponse.statusText}\\n\\n`;\n                }\n                \n            } catch (error) {\n                resultDiv.textContent += `API测试失败: ${error.message}\\n`;\n            }\n        }\n\n        async function testSettingsAPI() {\n            const resultDiv = document.getElementById('dataSyncResult');\n            if (!resultDiv.textContent) {\n                resultDiv.style.display = 'block';\n                resultDiv.textContent = '';\n            }\n            \n            resultDiv.textContent += '\\n🔄 测试设置API...\\n';\n            \n            try {\n                // 测试 /api/settings\n                const settingsResponse = await fetch('/api/settings', {\n                    method: 'GET',\n                    credentials: 'include'\n                });\n                \n                resultDiv.textContent += `GET /api/settings: ${settingsResponse.status}\\n`;\n                \n                if (settingsResponse.ok) {\n                    const settingsData = await settingsResponse.json();\n                    resultDiv.textContent += `设置信息: ${JSON.stringify(settingsData, null, 2)}\\n\\n`;\n                } else {\n                    resultDiv.textContent += `错误: ${settingsResponse.statusText}\\n\\n`;\n                }\n                \n            } catch (error) {\n                resultDiv.textContent += `设置API测试失败: ${error.message}\\n`;\n            }\n        }\n\n        function testDataMerging() {\n            const resultDiv = document.getElementById('dataSyncResult');\n            if (!resultDiv.textContent) {\n                resultDiv.style.display = 'block';\n                resultDiv.textContent = '';\n            }\n            \n            resultDiv.textContent += '\\n🔗 数据合并逻辑:\\n';\n            resultDiv.textContent += '- ✅ 已增强Background Script的用户信息获取\\n';\n            resultDiv.textContent += '- ✅ 添加了数据来源追踪 (main_system_* / default_demo)\\n';\n            resultDiv.textContent += '- ✅ 改进了错误处理和回退机制\\n';\n            resultDiv.textContent += '- ✅ 合并基本用户信息和详细设置\\n';\n            resultDiv.textContent += '\\n请在插件中测试实际的数据合并效果\\n';\n            \n            updateTestStatus('dataSync', 'pass');\n        }\n\n        function updateTestStatus(testName, status) {\n            testResults[testName] = status;\n            \n            const statusDiv = document.getElementById('testStatus');\n            const indicators = {\n                realLogin: '真实登录验证',\n                demoWarning: '演示模式警告', \n                dataSync: '数据同步功能',\n                errorHandling: '错误处理机制'\n            };\n            \n            let html = '';\n            for (const [key, label] of Object.entries(indicators)) {\n                const result = testResults[key];\n                let className = 'status-pending';\n                if (result === 'pass') className = 'status-pass';\n                if (result === 'fail') className = 'status-fail';\n                \n                html += `<span class=\"status-indicator ${className}\">${label}</span>`;\n            }\n            \n            statusDiv.innerHTML = html;\n        }\n\n        // 初始化\n        log('测试页面已加载，请按步骤进行测试');\n    </script>\n</body>\n</html> ",
      "tags": [],
      "folderId": "1",
      "createdAt": "2025-08-20T02:18:41.819Z",
      "updatedAt": "2025-08-20T02:18:41.819Z"
    }
  ],
  "folders": [
    {
      "id": "1",
      "name": "全部内容",
      "createdAt": "2024-01-01T00:00:00.000Z"
    },
    {
      "id": "2",
      "name": "网页源码",
      "parentId": "1",
      "createdAt": "2024-01-01T00:00:00.000Z"
    },
    {
      "id": "3",
      "name": "网页快照",
      "parentId": "1",
      "createdAt": "2024-01-01T00:00:00.000Z"
    }
  ],
  "tags": [
    {
      "id": "1",
      "name": "示例",
      "color": "#409eff"
    },
    {
      "id": "2",
      "name": "欢迎",
      "color": "#67c23a"
    },
    {
      "id": "3",
      "name": "前端",
      "color": "#e6a23c"
    },
    {
      "id": "4",
      "name": "教程",
      "color": "#f56c6c"
    }
  ]
}